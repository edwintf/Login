{"version":3,"sources":["Components/login.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","login","state","isSignedIn","uiConfig","signInFlow","signInOptions","auth","GoogleAuthProvider","PROVIDER_ID","FacebookAuthProvider","EmailAuthProvider","PhoneAuthProvider","callbacks","signInSuccess","componentDidMount","onAuthStateChanged","user","setState","console","log","displayName","correo","email","className","this","currentUser","alt","src","photoURL","onClick","signOut","firebaseAuth","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sTAKAA,IAASC,cAAc,CACrBC,OAAQ,0CACRC,WAAY,gC,IAuDCC,E,2MAnDbC,MAAQ,CAAEC,YAAY,G,EACtBC,SAAW,CACTC,WAAY,QACZC,cAAe,CACbT,IAASU,KAAKC,mBAAmBC,YACjCZ,IAASU,KAAKG,qBAAqBD,YACnCZ,IAASU,KAAKI,kBAAkBF,YAChCZ,IAASU,KAAKK,kBAAkBH,aAElCI,UAAW,CACTC,cAAe,kBAAM,K,EAIzBC,kBAAoB,WAClBlB,IAASU,OAAOS,oBAAmB,SAAAC,GACjC,EAAKC,SAAS,CAAEf,aAAcc,IAE9BE,QAAQC,IAAI,CAACH,KAAOA,EAAKI,YACvBC,OAASL,EAAKM,Y,wEAMlB,OACE,yBAAKC,UAAU,SACZC,KAAKvB,MAAMC,WACV,8BACE,yBAAKqB,UAAU,UAAf,cACA,4BAAK3B,IAASU,OAAOmB,YAAYL,aACjC,yBACEM,IAAI,kBACJC,IAAK/B,IAASU,OAAOmB,YAAYG,WAEnC,6BACA,4BAAQC,QAAS,kBAAMjC,IAASU,OAAOwB,WAAWP,UAAU,aAA5D,kBAGF,8BACA,8CACA,kBAAC,IAAD,CACEpB,SAAUqB,KAAKrB,SACf4B,aAAcnC,IAASU,e,GA5Cf0B,aCEAC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.32433d86.chunk.js","sourcesContent":["import React, { Component } from \"react\"\r\nimport \"./login.css\"\r\nimport firebase from \"firebase\"\r\nimport StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\"\r\n\r\nfirebase.initializeApp({\r\n  apiKey: \"AIzaSyAyuMvivyIEgRTRF51ltk745z12NXP3yPI\",\r\n  authDomain: \"login-bd259.firebaseapp.com\"\r\n})\r\n\r\nclass login extends Component {\r\n  state = { isSignedIn: false }\r\n  uiConfig = {\r\n    signInFlow: \"popup\",\r\n    signInOptions: [\r\n      firebase.auth.GoogleAuthProvider.PROVIDER_ID,\r\n      firebase.auth.FacebookAuthProvider.PROVIDER_ID,\r\n      firebase.auth.EmailAuthProvider.PROVIDER_ID,\r\n      firebase.auth.PhoneAuthProvider.PROVIDER_ID\r\n    ],\r\n    callbacks: {\r\n      signInSuccess: () => false\r\n    }\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    firebase.auth().onAuthStateChanged(user => {\r\n      this.setState({ isSignedIn: !!user })\r\n      //console.log(\"user\", user)\r\n      console.log({user:  user.displayName,\r\n        correo:  user.email,\r\n      })\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"login\">\r\n        {this.state.isSignedIn ? (\r\n          <span>\r\n            <div className=\"titulo\">Bienvenido</div>\r\n            <h1>{firebase.auth().currentUser.displayName}</h1>\r\n            <img\r\n              alt=\"profile picture\"\r\n              src={firebase.auth().currentUser.photoURL}\r\n            />\r\n            <br></br>\r\n            <button onClick={() => firebase.auth().signOut()} className=\"btn-salir\">Cerrar sesion</button>\r\n          </span>\r\n        ) : (\r\n          <span>\r\n          <h2>Login Firebase</h2>\r\n          <StyledFirebaseAuth\r\n            uiConfig={this.uiConfig}\r\n            firebaseAuth={firebase.auth()}\r\n          /></span>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default login","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/login';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}